// tslint:disable
/**
 * Tradewolf API
 * A definition for Tradewolf API
 *
 * The version of the OpenAPI document: 0.8.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ArbitragePair
 */
export interface ArbitragePair {
    /**
     * 
     * @type {string}
     * @memberof ArbitragePair
     */
    exchange_a?: string;
    /**
     * 
     * @type {string}
     * @memberof ArbitragePair
     */
    exchange_b?: string;
    /**
     * 
     * @type {string}
     * @memberof ArbitragePair
     */
    trading?: string;
    /**
     * 
     * @type {string}
     * @memberof ArbitragePair
     */
    settlement?: string;
}
/**
 * 
 * @export
 * @interface BoardBar
 */
export interface BoardBar {
    /**
     * 
     * @type {number}
     * @memberof BoardBar
     */
    amount?: number;
    /**
     * 
     * @type {number}
     * @memberof BoardBar
     */
    price?: number;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    message: string;
}
/**
 * 
 * @export
 * @interface OrderBook
 */
export interface OrderBook {
    /**
     * 
     * @type {string}
     * @memberof OrderBook
     */
    trading?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderBook
     */
    settlement?: string;
    /**
     * 
     * @type {Array<BoardBar>}
     * @memberof OrderBook
     */
    bids?: Array<BoardBar>;
    /**
     * 
     * @type {Array<BoardBar>}
     * @memberof OrderBook
     */
    asks?: Array<BoardBar>;
}
/**
 * 
 * @export
 * @interface WithdrawalFee
 */
export interface WithdrawalFee {
    /**
     * 
     * @type {string}
     * @memberof WithdrawalFee
     */
    currency?: string;
    /**
     * 
     * @type {number}
     * @memberof WithdrawalFee
     */
    amount?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint retrieves all Tradewolf supported currency pairs for arbitrage. The fields \"exchange_a\" and \"exchange_b\" is unorderd.
         * @param {string} X_API_KEY 
         * @param {string} X_API_SIGNATURE 
         * @param {number} X_API_TIMESTAMP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArbitragePairs(X_API_KEY: string, X_API_SIGNATURE: string, X_API_TIMESTAMP: number, options: any = {}): RequestArgs {
            // verify required parameter 'X_API_KEY' is not null or undefined
            if (X_API_KEY === null || X_API_KEY === undefined) {
                throw new RequiredError('X_API_KEY','Required parameter X_API_KEY was null or undefined when calling getArbitragePairs.');
            }
            // verify required parameter 'X_API_SIGNATURE' is not null or undefined
            if (X_API_SIGNATURE === null || X_API_SIGNATURE === undefined) {
                throw new RequiredError('X_API_SIGNATURE','Required parameter X_API_SIGNATURE was null or undefined when calling getArbitragePairs.');
            }
            // verify required parameter 'X_API_TIMESTAMP' is not null or undefined
            if (X_API_TIMESTAMP === null || X_API_TIMESTAMP === undefined) {
                throw new RequiredError('X_API_TIMESTAMP','Required parameter X_API_TIMESTAMP was null or undefined when calling getArbitragePairs.');
            }
            const localVarPath = `/arbitrage-pairs`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (X_API_KEY !== undefined && X_API_KEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String((X_API_KEY));
            }

            if (X_API_SIGNATURE !== undefined && X_API_SIGNATURE !== null) {
                localVarHeaderParameter['X-API-SIGNATURE'] = String(X_API_SIGNATURE);
            }

            if (X_API_TIMESTAMP !== undefined && X_API_TIMESTAMP !== null) {
                localVarHeaderParameter['X-API-TIMESTAMP'] = String((X_API_TIMESTAMP));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint retrieves all Tradewolf supported orderbooks.
         * @param {string} exchange 
         * @param {string} X_API_KEY 
         * @param {string} X_API_SIGNATURE 
         * @param {number} X_API_TIMESTAMP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderBookByExchange(exchange: string, X_API_KEY: string, X_API_SIGNATURE: string, X_API_TIMESTAMP: number, options: any = {}): RequestArgs {
            // verify required parameter 'exchange' is not null or undefined
            if (exchange === null || exchange === undefined) {
                throw new RequiredError('exchange','Required parameter exchange was null or undefined when calling getOrderBookByExchange.');
            }
            // verify required parameter 'X_API_KEY' is not null or undefined
            if (X_API_KEY === null || X_API_KEY === undefined) {
                throw new RequiredError('X_API_KEY','Required parameter X_API_KEY was null or undefined when calling getOrderBookByExchange.');
            }
            // verify required parameter 'X_API_SIGNATURE' is not null or undefined
            if (X_API_SIGNATURE === null || X_API_SIGNATURE === undefined) {
                throw new RequiredError('X_API_SIGNATURE','Required parameter X_API_SIGNATURE was null or undefined when calling getOrderBookByExchange.');
            }
            // verify required parameter 'X_API_TIMESTAMP' is not null or undefined
            if (X_API_TIMESTAMP === null || X_API_TIMESTAMP === undefined) {
                throw new RequiredError('X_API_TIMESTAMP','Required parameter X_API_TIMESTAMP was null or undefined when calling getOrderBookByExchange.');
            }
            const localVarPath = `/orderbooks`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (exchange !== undefined) {
                localVarQueryParameter['exchange'] = exchange;
            }

            if (X_API_KEY !== undefined && X_API_KEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String((X_API_KEY));
            }

            if (X_API_SIGNATURE !== undefined && X_API_SIGNATURE !== null) {
                localVarHeaderParameter['X-API-SIGNATURE'] = String(X_API_SIGNATURE);
            }

            if (X_API_TIMESTAMP !== undefined && X_API_TIMESTAMP !== null) {
                localVarHeaderParameter['X-API-TIMESTAMP'] = String((X_API_TIMESTAMP));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} exchange 
         * @param {string} X_API_KEY 
         * @param {string} X_API_SIGNATURE 
         * @param {number} X_API_TIMESTAMP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWithdrawalFeesByExchange(exchange: string, X_API_KEY: string, X_API_SIGNATURE: string, X_API_TIMESTAMP: number, options: any = {}): RequestArgs {
            // verify required parameter 'exchange' is not null or undefined
            if (exchange === null || exchange === undefined) {
                throw new RequiredError('exchange','Required parameter exchange was null or undefined when calling getWithdrawalFeesByExchange.');
            }
            // verify required parameter 'X_API_KEY' is not null or undefined
            if (X_API_KEY === null || X_API_KEY === undefined) {
                throw new RequiredError('X_API_KEY','Required parameter X_API_KEY was null or undefined when calling getWithdrawalFeesByExchange.');
            }
            // verify required parameter 'X_API_SIGNATURE' is not null or undefined
            if (X_API_SIGNATURE === null || X_API_SIGNATURE === undefined) {
                throw new RequiredError('X_API_SIGNATURE','Required parameter X_API_SIGNATURE was null or undefined when calling getWithdrawalFeesByExchange.');
            }
            // verify required parameter 'X_API_TIMESTAMP' is not null or undefined
            if (X_API_TIMESTAMP === null || X_API_TIMESTAMP === undefined) {
                throw new RequiredError('X_API_TIMESTAMP','Required parameter X_API_TIMESTAMP was null or undefined when calling getWithdrawalFeesByExchange.');
            }
            const localVarPath = `/withdrawal-fees`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (exchange !== undefined) {
                localVarQueryParameter['exchange'] = exchange;
            }

            if (X_API_KEY !== undefined && X_API_KEY !== null) {
                localVarHeaderParameter['X-API-KEY'] = String((X_API_KEY));
            }

            if (X_API_SIGNATURE !== undefined && X_API_SIGNATURE !== null) {
                localVarHeaderParameter['X-API-SIGNATURE'] = String(X_API_SIGNATURE);
            }

            if (X_API_TIMESTAMP !== undefined && X_API_TIMESTAMP !== null) {
                localVarHeaderParameter['X-API-TIMESTAMP'] = String((X_API_TIMESTAMP));
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This endpoint retrieves all Tradewolf supported currency pairs for arbitrage. The fields \"exchange_a\" and \"exchange_b\" is unorderd.
         * @param {string} X_API_KEY 
         * @param {string} X_API_SIGNATURE 
         * @param {number} X_API_TIMESTAMP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArbitragePairs(X_API_KEY: string, X_API_SIGNATURE: string, X_API_TIMESTAMP: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArbitragePair>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getArbitragePairs(X_API_KEY, X_API_SIGNATURE, X_API_TIMESTAMP, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint retrieves all Tradewolf supported orderbooks.
         * @param {string} exchange 
         * @param {string} X_API_KEY 
         * @param {string} X_API_SIGNATURE 
         * @param {number} X_API_TIMESTAMP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderBookByExchange(exchange: string, X_API_KEY: string, X_API_SIGNATURE: string, X_API_TIMESTAMP: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrderBook>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getOrderBookByExchange(exchange, X_API_KEY, X_API_SIGNATURE, X_API_TIMESTAMP, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} exchange 
         * @param {string} X_API_KEY 
         * @param {string} X_API_SIGNATURE 
         * @param {number} X_API_TIMESTAMP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWithdrawalFeesByExchange(exchange: string, X_API_KEY: string, X_API_SIGNATURE: string, X_API_TIMESTAMP: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WithdrawalFee>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getWithdrawalFeesByExchange(exchange, X_API_KEY, X_API_SIGNATURE, X_API_TIMESTAMP, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This endpoint retrieves all Tradewolf supported currency pairs for arbitrage. The fields \"exchange_a\" and \"exchange_b\" is unorderd.
         * @param {string} X_API_KEY 
         * @param {string} X_API_SIGNATURE 
         * @param {number} X_API_TIMESTAMP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArbitragePairs(X_API_KEY: string, X_API_SIGNATURE: string, X_API_TIMESTAMP: number, options?: any): AxiosPromise<Array<ArbitragePair>> {
            return DefaultApiFp(configuration).getArbitragePairs(X_API_KEY, X_API_SIGNATURE, X_API_TIMESTAMP, options)(axios, basePath);
        },
        /**
         * This endpoint retrieves all Tradewolf supported orderbooks.
         * @param {string} exchange 
         * @param {string} X_API_KEY 
         * @param {string} X_API_SIGNATURE 
         * @param {number} X_API_TIMESTAMP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderBookByExchange(exchange: string, X_API_KEY: string, X_API_SIGNATURE: string, X_API_TIMESTAMP: number, options?: any): AxiosPromise<Array<OrderBook>> {
            return DefaultApiFp(configuration).getOrderBookByExchange(exchange, X_API_KEY, X_API_SIGNATURE, X_API_TIMESTAMP, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} exchange 
         * @param {string} X_API_KEY 
         * @param {string} X_API_SIGNATURE 
         * @param {number} X_API_TIMESTAMP 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWithdrawalFeesByExchange(exchange: string, X_API_KEY: string, X_API_SIGNATURE: string, X_API_TIMESTAMP: number, options?: any): AxiosPromise<Array<WithdrawalFee>> {
            return DefaultApiFp(configuration).getWithdrawalFeesByExchange(exchange, X_API_KEY, X_API_SIGNATURE, X_API_TIMESTAMP, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * This endpoint retrieves all Tradewolf supported currency pairs for arbitrage. The fields \"exchange_a\" and \"exchange_b\" is unorderd.
     * @param {string} X_API_KEY 
     * @param {string} X_API_SIGNATURE 
     * @param {number} X_API_TIMESTAMP 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getArbitragePairs(X_API_KEY: string, X_API_SIGNATURE: string, X_API_TIMESTAMP: number, options?: any) {
        return DefaultApiFp(this.configuration).getArbitragePairs(X_API_KEY, X_API_SIGNATURE, X_API_TIMESTAMP, options)(this.axios, this.basePath);
    }

    /**
     * This endpoint retrieves all Tradewolf supported orderbooks.
     * @param {string} exchange 
     * @param {string} X_API_KEY 
     * @param {string} X_API_SIGNATURE 
     * @param {number} X_API_TIMESTAMP 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getOrderBookByExchange(exchange: string, X_API_KEY: string, X_API_SIGNATURE: string, X_API_TIMESTAMP: number, options?: any) {
        return DefaultApiFp(this.configuration).getOrderBookByExchange(exchange, X_API_KEY, X_API_SIGNATURE, X_API_TIMESTAMP, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} exchange 
     * @param {string} X_API_KEY 
     * @param {string} X_API_SIGNATURE 
     * @param {number} X_API_TIMESTAMP 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWithdrawalFeesByExchange(exchange: string, X_API_KEY: string, X_API_SIGNATURE: string, X_API_TIMESTAMP: number, options?: any) {
        return DefaultApiFp(this.configuration).getWithdrawalFeesByExchange(exchange, X_API_KEY, X_API_SIGNATURE, X_API_TIMESTAMP, options)(this.axios, this.basePath);
    }

}


